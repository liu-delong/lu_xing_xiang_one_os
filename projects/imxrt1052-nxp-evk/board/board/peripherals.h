/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_edma.h"
#include "fsl_dmamux.h"
#include "fsl_common.h"
#include "fsl_adc.h"
#include "fsl_adc_etc.h"
#include "fsl_gpt.h"
#include "fsl_clock.h"
#include "fsl_lpi2c.h"
#include "fsl_lpspi.h"
#include "fsl_lpuart.h"
#include "fsl_snvs_hp.h"
#include "fsl_rtwdog.h"
#include "fsl_sai.h"
#include "fsl_sai_edma.h"
#include "fsl_trng.h"
#include "fsl_wdog.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals functional group */
/* Used DMA device. */
#define DMA0_DMA_BASEADDR DMA0
/* Associated DMAMUX device that is used for muxing of requests. */
#define DMA0_DMAMUX_BASEADDR DMAMUX
/* BOARD_InitPeripherals defines for ADC1 */
/* Definition of peripheral ID */
#define ADC1_PERIPHERAL ADC1
/* Definition of special channel interconnected with ADC_ETC which takes real channel to be measured from ADC_ETC. */
#define ADC1_CHANNEL_DRIVEN_BY_ADC_ETC 16U
/* BOARD_InitPeripherals defines for ADC_ETC */
/* Definition of peripheral ID */
#define ADC_ETC_PERIPHERAL ADC_ETC
/* Definition of the names for trigger configurations. Used as index to ADC_ETC_trigger_config array. */
enum ADC_ETC_trigger_config_names
{
  ADC_ETC_TC_0 = 0U
};
/* Definition of the names for trigger group parameter of multiple functions, like ADC_ETC_SetTriggerConfig() and ADC_ETC_SetTriggerChainConfig(). */
enum ADC_ETC_trigger_config_trigger_group_names
{
  ADC_ETC_TC_0_TG = 0U
};
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_0_IRQN ADC_ETC_IRQ0_IRQn
/* ADC_ETC interrupt handler identifier. */
#define ADC_ETC_ADC_ETC_0_IRQHANDLER ADC_ETC_IRQ0_IRQHandler
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_1_IRQN ADC_ETC_IRQ1_IRQn
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_2_IRQN ADC_ETC_IRQ2_IRQn
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_3_IRQN 
/* ADC_ETC interrupt vector ID (number). */
#define ADC_ETC_ADC_ETC_ERROR_IRQN ADC_ETC_ERROR_IRQ_IRQn
/* ADC_ETC interrupt handler identifier. */
#define ADC_ETC_ADC_ETC_ERROR_IRQHANDLER ADC_ETC_ERROR_IRQ_IRQHandler
/* Definition of peripheral ID */
#define GPT1_PERIPHERAL GPT1
/* Definition of the clock source frequency */
#define GPT1_CLOCK_SOURCE 75000000UL
/* GPT1 interrupt vector ID (number). */
#define GPT1_GPT_IRQN GPT1_IRQn
/* GPT1 interrupt handler identifier. */
#define GPT1_GPT_IRQHANDLER GPT1_IRQHandler
/* Definition of peripheral ID */
#define GPT2_PERIPHERAL GPT2
/* Definition of the clock source frequency */
#define GPT2_CLOCK_SOURCE 75000000UL
/* GPT2 interrupt vector ID (number). */
#define GPT2_GPT_IRQN GPT2_IRQn
/* GPT2 interrupt handler identifier. */
#define GPT2_GPT_IRQHANDLER GPT2_IRQHandler
/* BOARD_InitPeripherals defines for LPI2C1 */
/* Definition of peripheral ID */
#define LPI2C1_PERIPHERAL LPI2C1
/* Definition of clock source */
#define LPI2C1_CLOCK_FREQ 10000000UL
/* Transfer buffer size */
#define LPI2C1_MASTER_BUFFER_SIZE 2
/* BOARD_InitPeripherals defines for LPI2C3 */
/* Definition of peripheral ID */
#define LPI2C3_PERIPHERAL LPI2C3
/* Definition of clock source */
#define LPI2C3_CLOCK_FREQ 10000000UL
/* Transfer buffer size */
#define LPI2C3_MASTER_BUFFER_SIZE 1
/* BOARD_InitPeripherals defines for LPSPI1 */
/* Definition of peripheral ID */
#define LPSPI1_PERIPHERAL LPSPI1
/* Definition of clock source */
#define LPSPI1_CLOCK_FREQ 105600000UL
/* Definition of Tx FIFO watermark */
#define LPSPI1_TX_FIFO_WATERMARK 15U
/* Definition of Rx FIFO watermark */
#define LPSPI1_RX_FIFO_WATERMARK 15U
/* BOARD_InitPeripherals defines for LPSPI3 */
/* Definition of peripheral ID */
#define LPSPI3_PERIPHERAL LPSPI3
/* Definition of clock source */
#define LPSPI3_CLOCK_FREQ 105600000UL
/* LPSPI3 interrupt vector ID (number). */
#define LPSPI3_IRQN LPSPI3_IRQn
/* LPSPI3 interrupt handler identifier. */
#define LPSPI3_IRQHANDLER LPSPI3_IRQHandler
/* Definition of peripheral ID */
#define LPUART1_PERIPHERAL LPUART1
/* Definition of the clock source frequency */
#define LPUART1_CLOCK_SOURCE 80000000UL
/* LPUART1 interrupt vector ID (number). */
#define LPUART1_SERIAL_RX_TX_IRQN LPUART1_IRQn
/* LPUART1 interrupt handler identifier. */
#define LPUART1_SERIAL_RX_TX_IRQHANDLER LPUART1_IRQHandler
/* Definition of peripheral ID */
#define RTC_PERIPHERAL SNVS
/* Definition of peripheral ID */
#define RTWDOG_PERIPHERAL RTWDOG
/* Definition of the clock source frequency */
#define RTWDOG_CLOCK_SOURCE 32768UL
/* RTWDOG interrupt vector ID (number). */
#define RTWDOG_IRQN RTWDOG_IRQn
/* RTWDOG interrupt handler identifier. */
#define RTWDOG_IRQHANDLER RTWDOG_IRQHandler
/* Definition of peripheral ID */
#define SAI1_PERIPHERAL SAI1
/* Bit clock source frequency used for calculating the bit clock divider in the TxSetBitClockRate function. */
#define SAI1_TX_BCLK_SOURCE_CLOCK_HZ 6144375UL
/* Bit clock source frequency used for calculating the bit clock divider in the RxSetBitClockRate function. */
#define SAI1_RX_BCLK_SOURCE_CLOCK_HZ 6144375UL
/* Sample rate used for calculating the bit clock divider in the TxSetBitClockRate function. */
#define SAI1_TX_SAMPLE_RATE 16000UL
/* Sample rate used for calculating the bit clock divider in the RxSetBitClockRate function. */
#define SAI1_RX_SAMPLE_RATE 44100UL
/* Word width used for calculating the bit clock divider in the TxSetBitClockRate function. */
#define SAI1_TX_WORD_WIDTH 16U
/* Word width used for calculating the bit clock divider in the RxSetBitClockRate function. */
#define SAI1_RX_WORD_WIDTH 16U
/* Number of words within frame used for calculating the bit clock divider in the TxSetBitClockRate function. */
#define SAI1_TX_WORDS_PER_FRAME 2U
/* Number of words within frame used for calculating the bit clock divider in the RxSetBitClockRate function. */
#define SAI1_RX_WORDS_PER_FRAME 2U
/* SAI1 eDMA source request. */
#define SAI1_TX_DMA_REQUEST kDmaRequestMuxSai1Tx
/* Selected eDMA channel number. */
#define SAI1_TX_DMA_CHANNEL 0
/* DMAMUX device that is used for muxing of the request. */
#define SAI1_TX_DMAMUX_BASEADDR DMAMUX
/* Used DMA device. */
#define SAI1_TX_DMA_BASEADDR DMA0
/* SAI1 eDMA source request. */
#define SAI1_RX_DMA_REQUEST kDmaRequestMuxSai1Rx
/* Selected eDMA channel number. */
#define SAI1_RX_DMA_CHANNEL 1
/* DMAMUX device that is used for muxing of the request. */
#define SAI1_RX_DMAMUX_BASEADDR DMAMUX
/* Used DMA device. */
#define SAI1_RX_DMA_BASEADDR DMA0
/* Definition of peripheral ID */
#define TRNG1_PERIPHERAL TRNG
/* Definition of peripheral ID */
#define WDOG1_PERIPHERAL WDOG1

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const edma_config_t DMA0_config;
extern const adc_config_t ADC1_config;
extern const adc_etc_config_t ADC_ETC_config;
extern const adc_etc_trigger_config_t ADC_ETC_trigger_config[1];
extern const adc_etc_trigger_chain_config_t ADC_ETC_TC_0_chain_config[2];
extern const gpt_config_t GPT1_config;
extern const gpt_config_t GPT2_config;
extern const lpi2c_master_config_t LPI2C1_masterConfig;
extern lpi2c_master_transfer_t LPI2C1_masterTransfer;
extern uint8_t LPI2C1_masterBuffer[LPI2C1_MASTER_BUFFER_SIZE];
extern const lpi2c_master_config_t LPI2C3_masterConfig;
extern lpi2c_master_transfer_t LPI2C3_masterTransfer;
extern uint8_t LPI2C3_masterBuffer[LPI2C3_MASTER_BUFFER_SIZE];
extern lpi2c_master_handle_t LPI2C3_masterHandle;
extern const lpspi_master_config_t LPSPI1_config;
extern const lpspi_master_config_t LPSPI3_config;
extern const lpuart_config_t LPUART1_config;
/* SNVS HP configuration */
extern const snvs_hp_rtc_config_t RTC_config;
extern const rtwdog_config_t RTWDOG_config;
extern sai_transceiver_t SAI1_Tx_config;
extern sai_transceiver_t SAI1_Rx_config;
extern edma_handle_t SAI1_TX_Handle;
extern edma_handle_t SAI1_RX_Handle;
extern sai_edma_handle_t SAI1_SAI_Tx_eDMA_Handle;
extern sai_edma_handle_t SAI1_SAI_Rx_eDMA_Handle;
extern const trng_config_t TRNG1_config;
extern const wdog_config_t WDOG1_config;

/***********************************************************************************************************************
 * Callback functions
 **********************************************************************************************************************/
/* SAI transfer Tx callback function for the SAI1 component (init. function BOARD_InitPeripherals)*/
extern void SAI1_SAI_Tx_eDMA_CallBack(I2S_Type *base, sai_edma_handle_t *handle, status_t status, void *userData);
/* SAI transfer Rx callback function for the SAI1 component (init. function BOARD_InitPeripherals)*/
extern void SAI1_SAI_Rx_eDMA_CallBack(I2S_Type *base, sai_edma_handle_t *handle, status_t status, void *userData);

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/
void BOARD_InitPeripherals(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
